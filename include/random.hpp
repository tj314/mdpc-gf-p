#ifndef MCELIECE_QCMDPC_GF_P_RANDOM_HPP
#define MCELIECE_QCMDPC_GF_P_RANDOM_HPP

#include <flintxx.h>
#include <fmpzxx.h>
#include <fmpqxx.h>
#include <fmpz_mod_polyxx.h>
#include <fmpq_polyxx.h>
#include <iostream>
#include <vector>
#include <algorithm>
#include <random>
#include "utils.hpp"

using flint::fmpq_polyxx;
using flint::fmpzxx;
using flint::fmpqxx;
using flint::fmpz_mod_polyxx;
using std::vector;
using std::mt19937;
using std::random_device;
using std::uniform_int_distribution;

/**
 * @brief Random class is a singleton used to generate random integers, vectors and polynomials.
 */
class Random {
private:
    mt19937 engine{random_device{}()};

    Random() = default;

    /**
     * @brief Get the instance of Random.
     * @return Instance of Random.
     */
    static auto get() -> Random&;

    /**
     * @brief Generate a random unsigned integer from the range [0, bound).
     *
     * Bound is exclusive.
     * That is each unsigned integer x generated by this method is such that 0 <= x < bound.
     *
     * @param bound Unsigned integer such that each generated value is strictly less bound.
     * @return Randomly generated unsigned integer x such that 0 <= x < bound.
     */
    auto integer_internal(unsigned bound) -> unsigned;

    /**
     * @brief Generate a random vector of length k according to the MDPC GF(p) spec for polynomials h0 and h1.
     *
     * The generation is such that:
     * -# an empty vector of length k is initialized
     * -# the first k/3 positions are set to 1
     * -# the next k/3 positions are set to -1
     * -# the remaining k/3 positions are set to 0
     * -# the sum of all values in the vector is now 0
     * -# the vector is shuffled using Knuth algorithm P (Fisher-Yates algorithm)
     * -# then the value add_to_first is added to the first item in the vector
     * -# the resulting vector is returned
     *
     * @param k Parameter k from the cryptosystem settings, length of the vector.
     * @param add_to_first Value to add to the first item in the vector.
     * @return Randomly generated polynomial within the MDPC GF(p) spec for h0 and h1.
     */
    auto poly_internal(unsigned k, unsigned add_to_first = 0) -> vector<int>;

    /**
     * @brief Generate a random error vector of length 2*k according to the MDPC GF(p) spec.
     *
     * The generation is such that:
     * -# an empty vector of length 2*k is initialized
     * -# all positions if the vector are randomly set to -1, 0 or 1
     * -# the resulting vector is returned
     *
     * @param k Parameter k from the cryptosystem settings.
     * @return Randomly generated error vector within the MDPC GF(p) spec.
     */
    auto error_vector_internal(unsigned k) -> vector<int>;

public:
    /**
     * @brief Class Random is a singleton, so copying is disallowed.
     * @param r
     */
    Random(const Random& r) = delete;

    /**
     * @brief Generate a random unsigned integer from the range [0, bound).
     * @see Random::integer_internal(unsigned bound)
     * @param bound Exclusive top bound.
     * @return Generated unsigned integer x such that 0 <= x < bound.
     */
    static auto integer(unsigned bound) -> unsigned;

    /**
     * @brief Generate a random rational polynomial according to the MDPC GF(p) spec for polynomials h0 and h1.
     * @see Random::poly_internal(unsigned k, unsigned add_to_first = 0)
     * @param output Polynomial to store the result in. Its degree will be less than k.
     * @param k Parameter k from the cryptosystem's settings.
     * @param add_to_first Value to add to the coefficient of x^0.
     */
    static auto poly(fmpq_polyxx& output, unsigned k, unsigned add_to_first = 0) -> void;

    /**
     * @brief Generate a random polynomial with coefficients from Z_q according to the MDPC GF(p) spec for polynomials h0 and h1.
     * @see Random::poly_internal(unsigned k, unsigned add_to_first = 0)
     * @param output Polynomial to store the result in. Its degree will be less than k.
     * @param k Parameter k from the cryptosystem's settings.
     * @param q Parameter q from the cryptosystem's settings, used as modulus in Z_q.
     * @param add_to_first Value to add to the coefficient of x^0.
     */
    static auto poly(fmpz_mod_polyxx& output, unsigned k, unsigned q, unsigned add_to_first = 0) -> void;

    /**
     * @brief Generate a random polynomial with coefficients from Z_q according to the MDPC GF(p) spec for polynomials h0 and h1.
     * @see Random::poly_internal(unsigned k, unsigned add_to_first = 0)
     * @param output Vector to store the result in. Its degree will be less than k.
     * @param k Parameter k from the cryptosystem's settings.
     * @param q Parameter q from the cryptosystem's settings, used as modulus in Z_q.
     * @param add_to_first Value to add to the coefficient of x^0.
     */
    static auto poly(vector<unsigned>& output, unsigned k, unsigned q, unsigned add_to_first=0) -> void;

    /**
     * @brief Generate a random error vector of length 2*k according to the MDPC GF(p) spec.
     * @see Random::error_vector_internal(unsigned k)
     * @param k Parameter k from the cryptosystem settings.
     * @return Randomly generated error vector within the MDPC GF(p) spec.
     */
    static auto error_vector(unsigned k) -> vector<int>;
};
#endif
